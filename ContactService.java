package com.alicek.contactService;
import java.util.HashMap;
import java.util.Random;
import java.util.stream.LongStream;

//Contact service meant to provide creation, update, and deletion of contacts
public class ContactService {
    
    HashMap<String, Contact> contacts = new HashMap<String, Contact>();



    //method for adding a Contact. Takes four strings, encapsulating the fact that
    //parameters are wrapped into an Arraylist. Returns newly created contact.
    public Contact addContact(String firstName, String lastName, String phoneNum, String Address) {
        String contactId = this.generateContactId();
        Contact addedContact = new Contact(firstName, lastName, phoneNum, Address, contactId);
        contacts.put(addedContact.getContactId(), addedContact);
        return addedContact;
    }

    //Contact ID generated by getting a max integer and parsing it to 36-base number. 
    //The hardcoded limit (the argument given to nextLong) used to generate the next contact Id is the highest number
    //that can be represented by a 10 digit base-36 number, making the most of the 
    //length limit for contact IDs.
    private String generateContactId() {
        //create LongStream of random Longs within the bounds. The upper bound is the max decimal number
        //that can be represented by an alphanumeric (base 36) number.
        LongStream apptIdLongGenerator = new Random().longs(0L, 3656158440062975L);
        
        //get the first stable result of the generator as a Long type.
        Long contactIdLong = apptIdLongGenerator.findFirst().getAsLong();
        String contactId = Long.toString(contactIdLong, 36);
        return contactId;
    }
    //Method used to test contact ids and ensure they both are valid and exist in the 
    private void testContactId(String contactId){
        //make sure the contact is in the hashmap
        if (!contacts.containsKey(contactId)) {
            throw new IllegalArgumentException("Contact ID not found in memory!");
        }

    //Method used to delete a Contact from in-memory storage (hashmap)
    //tests ContactId first, so exception is thrown if necessary.
    //returns "true" if contact was deleted and "false" if not.
    }
    public Boolean deleteContact(String contactId) {
        Boolean deleted = false;
        testContactId(contactId);  
        contacts.remove(contactId);

        if (contacts.containsKey(contactId) == false){
            deleted = true;
        }
        return deleted;
    }

    //Method used to update contacts. Throws an error if a supplied action isn't supported.
    public String updateContact(String contactId, String parameter, String newValue){
        testContactId(contactId);
        if (parameter == null) {
            throw new IllegalArgumentException("Null parameter given. Expected 'first', 'last', 'phone', or 'address'");
        }
        Contact contact = contacts.get(contactId);
        switch (parameter){
            case "first":
                contact.setFirstName(newValue);
                return contact.getFirstName();
            case "last":
                contact.setLastName(newValue);
                return contact.getLastName();

            case "phone":
                contact.setPhoneNum(newValue);
                return contact.getPhoneNum();

            case "address":
                contact.setAddress(newValue);
                return contact.getAddress();
            default:
                throw new IllegalArgumentException(
                    String.format("Invalid parameter given to modify. Expected 'first', 'last', 'phone', or 'address', got %s", parameter));
        }
    }
}
    
